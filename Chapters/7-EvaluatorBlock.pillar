!! Block Closures and Control Flow Statements

In this chapter we will extend our evaluator to manage block closures.
Blocks closures, lambda functions, lambda expressions, anonymous functions, or just blocks, are an important concept in most modern programming languages, including Pharo.
Block closures are functions without a name, thus anonymous, that allow developers to abstract general algorithms from their particular details. For example, a sorting algorithm can be separated from its sorting criteria by making the sorting criteria a block closure passed as argument to it. This allows developers to have the sorting algorithm defined and tested in a single place, and being able to reuse it with multiple criterion in different contexts.

Block closures are at the center of the Pharo language, because Pharo leverages block closures to define its control-flow instructions: conditionals, iterations, early returns. This means that implementing block closures is enough to support all kind of control flow statements in Pharo.
Moreover, Pharo libraries make usage of block closures to define library-specific control flow instructions, such as the ==do:== and ==select:== messages understood by collections.
Fevelopers are also encouraged to define their own control flow statements, to hide implementation details of their libraries from their users.

This chapter starts by explaining what blocks are and how they are evaluated.
Block evaluation, beign a core part of the language definition, is a service that is requested to the evaluator/interpreter through a primitive.
We then dive into the lexical capture feature of blocks: when a block closure is created, it captures its defining context, namely its enclosing context. This makes blocks able to read and write not only it's own temporary variables but also all the variables accessible to its enclosing context.
Finally, we implement non-local returns: return instructions that make the enclosing method context to return instead of the block's one. Non-local returns are usually used as early returns like ==break== statements in other languages.

!!! Representing a Block Closure

When a block expression is executed ==[ 1\+2 ]==, the instructions inside the block definition are not executed.
Instead, a block object is created, containing those instructions.
The execution of those instructions is delayed until we send the message ==value== to the block object.

This means that from our evaluator point of view, the evaluation of the closure will be different from the evaluation of its execution. Evaluating a block node will return a block object, and the method ==value== will require a primitive to request the interpreter the block's execution. This means that we need a way to represent a closure object in our evaluator, and that closure should store the code it is supposed to evaluate later when receiving the ==value== message.

Let us define the class ==CHBlock== to represent a block.
It has an instance variable ==code== to hold the block's AST, instance of the ==RBBlockNode== class.
Notice that we do not use the existing ==BlockClosure== class from Pharo, since this class is tied up with the Pharo bytecode.
For the sake of simplicity, we will not reconciliate bytecode and AST implementations, meaning that we need our own AST-based block implementation.

[[[
Object subclass: #CHBlock
	instanceVariableNames: 'code'
	classVariableNames: ''
	package: 'Champollion-Core'
]]]

[[[
CHBlock >> code: aRBBlockNode [
	code := aRBBlockNode
]
]]]

[[[
CHBlock >> code [
	^ code
]
]]]

@@note did we explain before that a method with no return returns self? I think we did not, we should add it! :)

Differently from the execution of a method that implicitly returns ==self== when it has no explicit return statement, a block without return statement implicitly returns the result of its last expression. Let us write a testing scenario for this case: evaluating the following block should return ==5== as it is its last expression. 

[[[
CHInterpretable >> returnBlockValue [
	^ [ 1 . 5 ] value
]
]]]

[[[
CHInterpreterTest >> testBlockValueIsLastStatementValue [
	self assert: (self executeSelector: #returnBlockValue) equals: 5
]
]]]

When the interpreter encounters a block node, it create a block object for it.
We define the method ==visitBlockNode:== as follows: 

[[[
CHInterpreter >> visitBlockNode: aRBBlockNode [
	^ CHBlock new
		code: aRBBlockNode;
		yourself
]
]]]

Closures are executed when they receive the message ==value== or one of its variants.
On the reception of such messages, their bodies should be executed.
Pharo does not define a way to request the execution of the block's body, unless we relied on our same interpreter.
However, since we still want this to be an implementation detail, we will define method evaluation as in normal Pharo, with primitive id ==201==.

[[[
CHBlock >> value [
	<primitive: 201>
  "If the fallback code executes it means that block evaluation failed.
  Return nil for now in such case."
  ^ nil
]
]]]

We now need to implement the new primitive in our evaluator.
A first version of it could just visit the body of the block's code.
Remember that primitives are executed in their own frame already, so the block's body will share the frame created for the primitive method.

[[[
CHInterpreter >> initializePrimitiveTable [
  ...
  primitives at: 201 put: #primitiveBlockValue.
  ...
]

CHInterpreter >> primitiveBlockValue [
	^ self visitNode: self receiver code body
]
]]]

!!!! Closure temporaries

Our simplified closure implementation does not yet have support for closure temporaries.
Indeed, a closure such as the following will fail with an interpreter failure because ==temp== is not defined in the frame.

[[[
  [ | temp | temp ] value
]]]

To solve this we need to declare all block temporaries when activating the block, as we did previously for methods.
As a first attempt to make our test green, let's declare block temporaries once the block is activated:

[[[
CHInterpreter >> primitiveBlockValue [
  "Initialize all temporaries in nil"
  aSequenceNode temporaryNames do: [ :e | self tempAt: e put: nil ].		
	^ self visitNode: self receiver code body
]
]]]

This is however, very similart to a sequence of messages we wrote when activating a normal method.

[[[
CHInterpreter >> executeMethod: anAST withReceiver: anObject andArguments: aCollection [
	| result |
	self pushNewFrame.
	self tempAt: #self put: anObject.
	anAST arguments with: aCollection do: [ :arg :value | self tempAt: arg name put: value ].
	anAST temporaryNames do: [ :tempName | self tempAt: tempName name put: nil ].
	result := self visitNode: anAST body.
	self popFrame.
	^ result
]
]]]

One way to solve this repetition is by moving temporary initialization to the ==visitSequenceNode:== method, since both method nodes and block nodes have sequence nodes inside them.

[[[
CHInterpreter >> visitSequenceNode: aSequenceNode [
  "Initialize all temporaries in nil"
  aSequenceNode temporaryNames do: [ :e | self tempAt: e put: nil ].		

  "Visit all but the last statement without caring about the result"
  aSequenceNode statements allButLast 
  	do: [ :each | self visitNode: each ].
  
  "Return the result of visiting the last statement"
  ^ self visitNode: aSequenceNode statements last
]

CHInterpreter >> primitiveBlockValue [
	^ self visitNode: self receiver code body
]

CHInterpreter >> executeMethod: anAST withReceiver: anObject andArguments: aCollection [
	| result |
	self pushNewFrame.
	self tempAt: #self put: anObject.
	anAST arguments with: aCollection do: [ :arg :value | self tempAt: arg name put: value ].
	result := self visitNode: anAST body.
	self popFrame.
	^ result
]
]]]

!!! Lexical Closures

As we stated before, block closures capture their defining context, namely its enclosing context.
Blocks are able to read and write their own temporary variables, but also all the variables accessible to its enclosing context.
In this section we will make evolve our closure execution infrastructure to support closure temporaries, and to provide access to the enclosing environment.

!!!! Capturing the Defining Context

When a closure is created, it does not capture the defining method but the defining execution context.
The defining execution context gives the closure access to that context's receiver, arguments and temporaries.
Moreover, it is a fairly common mistake to think that the captured context is the caller context, and not the defining context.
This is the case in the example above, where the context where the block closure is defined is both the defined and the caller. However, as soon as we work on more complex scenarios, where blocks are sent as arguments of methods, or stored in temporary variables, this does not hold anymore.

A first scenario to check that our block properly captures the defining context is to evaluate ==self== inside a block.
In our current design, the receiver specified in the block's frame is the block itself.
Indeed, the expression ==[ ... ] value== is a message send where the block is the message receiver and ==value== is the message. 
However, the ==self== variable should be bound to the instance of ==CHInterpretable==.

[[[
CHInterpretable >> readSelfInBlock [
	^ [ self ] value
]

CHInterpreterTest >> testReadSelfInBlock [
	self assert: (self executeSelector: #readSelfInBlock) equals: receiver
]
]]]

To make this test work, we need to implement two different things in our evaluator. First we need to capture the defining context at block creation time in ==visitBlockNode:==. Second we need to use that captured context to resolve variables.

Calturing the defining context is as simple as storing the current ==topFrame== at the moment of the method creation, as follows.
We extend ==CHBlock== with a ==definingContext== instance variable and corresponding accessors.

[[[
Object subclass: #CHBlock
  instanceVariableNames: 'code definingContext'
  classVariableNames: ''
  package: 'Champollion-Core'
    
CHInterpreter >> visitBlockNode: aRBBlockNode [
	^ CHBlock new
		code: aRBBlockNode;
    definingContext: self topFrame;
		yourself
]

CHInterpreter >> definingContext: aContext	[
	definingContext := aContext
]

CHInterpreter >> definingContext	[
	^ definingContext
]
]]]

Resolving the block variables is a bit more tricky case, as it can be resolved in many different ways.
For now we will choose to set the correct values and override the incorrect ones in the current frame upon block activation.
This solution will work as far as this primitive does not fail.
We leave for the reader to think what happens in such a case.

[[[
CHInterpreter >> primitiveBlockValue [
  | theBlock |
  theBlock := self receiver.
  self receiver: theBlock definingContext receiver.
  ^ self visitNode: self receiver code body
]

CHInterpreter >> receiver: aValue [
	^ self tempAt: #self put: aValue
]
]]]

Now that we can correctly resolve the receiver, instance variable reads and writes should work properly too.
We leave as an exercise for the reader to verify their correctness.

!!!! Looking up Temporaries in Lexical Contexts

A problem we have not solved yet involves the reads and writes of temporary variables that are not part of the current frame.
This is the case when a block tries to access a temporary of a parent lexical scope, such as another surrounding scope, or the home method.

Our next scenario checks that blocks can correctly read and write temporaries of the enclosing contexts.
In our test, the enclosing environment creates a temporary. The block reads that value and increases it by one.
When the block returns, the value of its temporary should have been updated from 0 to 1.

[[[
CHInterpretable >> increaseEnclosingTemporary [
  | temp |
  temp := 0.
	[ temp := temp + 1 ] value.
  ^ temp
]

CHInterpreterTest >> testIncreaseEnclosingTemporary [
	self assert: (self executeSelector: #increaseEnclosingTemporary) equals: 1
]
]]]

This scenario is resolved by implementing a temporary variable lookup in the block's defining context.
Of course, a block could be defined inside another's block context, so our lookup needs to be recursive.
The final case of our recursion is when the current lookup context does not have a defining context i.e., it is a method and not a block.

To simplify temporary variable lookup let's define first a helper method ==lookupFrameDefiningTemporary:== that returns the frame in which a temporary is defined. This method will return a frame, and will have to walk from a frame to its defining frame up to a method. However, so far the only object in our design knowing the defining frame is the block, and we do not have any way to access a block from its frame.

One possibility is to store a block in its frame when it is activated, and then go from a frame to its block to its defining frame and continue the lookup. Another possibility, which we will implement, is to directly store the defining context in the frame when the block is activated.

[[[
CHInterpreter >> primitiveBlockValue [
	| theBlock |
	theBlock := self receiver.
	self receiver: (theBlock definingContext at: #self).
	self tempAt: #__definingContext put: theBlock definingContext.
	^ self visitNode: theBlock code body
]

CHInterpreter >> lookupFrameDefiningTemporary: aName [
  | currentLookupFrame |
  currentLookupFrame := self topFrame.
  [ currentLookupFrame includesKey: aName ]
    whileFalse: [ currentLookupFrame := currentLookupFrame at: #__definingContext ].
  ^ currentLookupFrame
]
]]]

Now we need to redefine temporary reads and writes.
Temporary reads need to lookup the frame where the variable is defined and read the value from it.
Temporary writes need to lookup the frame where the variable is defined and write the value to it.

[[[
CHInterpreter >> visitTemporaryNode: aTemporaryNode [
  | definingFrame |
  definingFrame := self lookupFrameDefiningTemporary: aTemporaryNode name.
  ^ definingFrame at: aTemporaryNode name
]

CHInterpreter >> visitAssignmentNode: aRBAssignmentNode [
  | rightSide |
  rightSide := self visitNode: aRBAssignmentNode value.
  aRBAssignmentNode variable variable isTempVariable
    ifTrue: [ | definingFrame |
      definingFrame := self
        lookupFrameDefiningTemporary: aRBAssignmentNode variable name.
        definingFrame at: aRBAssignmentNode variable name put: rightSide ]
    ifFalse: [ aRBAssignmentNode variable variable write: rightSide to: self receiver ].
  ^ rightSide
]
]]]

!!! Block Non-Local Return

We have seen so far that blocks implicitly return the value of their last expression.
Return statements, instead, break the execution of the defining method, namely the home method, and return from it.
For example, let's consider a method using ==ifTrue:== to implement a guard which should stop the method execution if the guard fails:

[[[
CHInterpretable >> methodWithGuard
  true ifTrue: [ ^ nil ].
  ^ self doSomethingExpensive
]]]

@@note put a figure here to show the stack, the blocks, their relationships.

In this case, the block is not activated by ==methodWithGuard==. ==methodWithGuard== activates ==ifTrue:== which in turn activates our block. Still, our block knows the context of ==methodWithGuard== as its defining context.

If the block executes, the return statement should not return ==nil== to the ==ifTrue:== context: it should return from  ==methodWithGuard== with the ==nil== value, as if it was the return value of the method. Because of this, we call such return inside blocks "non-local returns", because they return from a non-local context, its home context.

To implement non-local returns, we will first start by defining a new helper method: ==homeFrameOf:== that returns the home frame of a frame. Note that the home frame of a normal method frame is itself.

[[[
CHInterpreter >> homeFrame [
  | currentLookupFrame |
  currentLookupFrame := self topFrame.
  [ currentLookupFrame includesKey: #__definingContext ]
    whileTrue: [ currentLookupFrame := currentLookupFrame at: #__definingContext ].
  ^ currentLookupFrame
]
]]]

A simple way to implement non local returns in Pharo is by using exceptions: exceptions unwind automatically the call-stack, thus short-circuiting the execution of all methods automatically. When we activate a method we then need to prepare ourselves to catch the exception indicating a return, and only manage it if the return is targetting the current method's context:

[[[
CHInterpreter >> execute: anAST withReceiver: anObject andArguments: aCollection [
	| result thisFrame |	
	thisFrame := self pushNewFrame.

	self tempAt: #__method put: anAST.
	self tempAt: #self put: anObject.
	anAST arguments with: aCollection
    do: [ :arg :value | self tempAt: arg name put: value ].

	result := [ self visitNode: anAST ]
		on: CHReturn "A return statement was executed"
		do: [ :return | 
			return homeFrame = thisFrame
				ifTrue: [ return value ]
				ifFalse: [ return pass ] ].

	self popFrame.
	^ result
]

CHInterpreter >> visitReturnNode: aReturnNode [
  CHReturn new
		value: (self visitNode: aReturnNode value);
		homeFrame: self homeFrame;
		signal
]

Error subclass: #CHReturn
	instanceVariableNames: 'value homeFrame'
	classVariableNames: ''
	package: 'Champollion-Core'

CHReturn >> homeFrame [
  ^ homeFrame
]

CHReturn >> homeFrame: aFrame [
  homeFrame := aFrame
]

CHReturn >> value [
  ^ value
]

CHReturn >> value: aValue [
  value := aValue
]
]]]

!!! Conclusion

In this chapter we have extended our evaluator with block closures. Our block closure implementation required adding a kind of object to our runtime, ==CHBlock==, to represent blocks containing some AST. Then we refined our evaluator to define a block evaluation primitive, and correctly set up the lexical context. Our lexical context implementation gives blocks access to the defining context's receiver and temporaries. We then shown a first implementation of non-local returns, using exceptions to unwind the stack.



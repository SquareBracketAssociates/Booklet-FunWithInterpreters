!! Implementing a Structural Evaluator

An evaluator is a kind of interpreter that executes a program. For example a Pharo evaluator is an interpreter that takes as input a Pharo program and executes each one of its statements, finally returning the result of the execution.
In this chapter and the following ones we will implement a Pharo evaluator as an AST interpreter, using the Visitor pattern we have seen before, meaning that the input of our evaluator will be AST nodes of a program to evaluate.

For presentation purposes, we will develop the evaluator in several stages, each in a different chapter.
First, in this chapter, we will show how to implement a structural evaluator, i.e., an evaluator that reads and writes the structures of objects, starting the presentation from constant values.
Later chapters will incrementally add support for other language features that deserve a chapter for themselves such as messages and blocks.

The presentation of this chapter is done in a somehow-relaxed TDD (test driven development) style.
For each new feature we first define the scenario we want to cover.
Since we are developing an evaluator, each scenario will be some code to execute and an expected result.
We then define a test for the scenario and we make it pass.
Before going to the next scenario, we do some refactorings to enhance the quality of our code.

During this process we will define and refine an AST visitor.
Note that we will write the visitor from scratch but we will reuse the node of the Pharo AST and their functionalities.

!!! Setting Up the Stage

To start writing our Pharo evaluator in TDD style, we will start by creating out test class ==CHInterpreterTest==.
Our class names are prefix with CH because we named the package of the interpreter Champollion.

[[[
TestCase subclass: #CHInterpreterTest
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Champollion-Tests'
]]]

This class will, until a change is imperative, host all our test methods.

!!!! Preparing the Scenarios

Our scenarios, made out of classes and methods to be interpreted, need to be written somewhere too.
We could store those scenarios in strings in our test class, that we will then need to parse and give to our interpreter as input.
However, for simplicity, and because in this book we do not want to center ourselves in parsing issues, we will write our scenarios as normal Pharo code, in normal Pharo classes.
This solution is simple enough and versatile to support more complex situations in the future.

We will host our first scenarios as methods in a new class named ==CHInterpretable==.

[[[
Object subclass: #CHInterpretable
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Champollion-Test'
]]]


!!! Evaluating Literals: Integers

Testing our evaluator requires that we test and assert some observable behavior.
In Pharo there are two main observable behaviors: either side-effects through assignments or results of methods through return statements.
We have chosen to use return statements, to introduce variables and assignments later.
To start, our first scenario is a method returning an integer, as in the code below:

[[[
CHInterpretable >> returnInteger [
	^ 5
]
]]]

Executing such a method should return an integer with value 5.

!!!! Writing a Red Test

Our first test implements what our scenario defined above: executing our method should return 5.
This first test specifies not only part of the behaviour of our interpreter, but also helps us in defining the part of its API: we want our interpreter to be able to start executing from some method's AST.
Below we define a first test for it: ==testReturnInteger==.

[[[
CHInterpreterTest >> testReturnInteger [
	| ast result |
	ast := (CHInterpretable >> #returnInteger) ast.
	result := self interpreter execute: ast.
	self assert: result equals: 5
]
]]]

This first test is worth one comment: since our evaluator is an AST interpreter, it requires an AST as input.
In other words, we need to get the AST of the ==returnInteger== method.
Instead of invoking the parser to get an AST from source code, we will use Pharo's reflective API to get the AST of an already existing method.

!!! Making the test pass: a First Literal Evaluator

Executing our first test fails first because our test does not understand ==interpreter==, meaning we need to implement a method for it in our test class.
We implement it as a factory method in our test class, returning a new instance of ==CHInterpreter==, and we define the class ==CHInterpreter== as follows.

[[[
CHInterpreterTest >> interpreter [
	^ CHInterpreter new
]
]]]

[[[
Object subclass: #CHInterpreter
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Champollion-Core'
]]]

The class ==CHInterpreter==  is the main entry point for our evaluator, and it will implement a visitor pattern over the Pharo method ASTs.  Note that it does not inherit from the default Pharo AST Visitor.
The Pharo AST visitor already implements generic versions of the ==visitXXX:=== methods that will do nothing instead of failing.
Not inheriting from it allows us to get problems such as does not understand exceptions that we will implement step by step in the debugger.
We nevertheless follow the same API as the default AST visitor and we use the nodes' ==accept:== visiting methods.

At this point, re-executing the test fails with a new error: our ==CHInterpreter== instance does not understand the message ==execute:==.
We implement ==execute:== to call the visitor main entry point, i.e., the method ==visitNode:==.

[[[
CHInterpreter >> execute: anAST [
	^ self visitNode: anAST
]
]]]

[[[
CHInterpreter >> visitNode: aNode [
	^ aNode acceptVisitor: self
]
]]]

Since we evaluate a method AST, when we reexecute the test, the execution halts because of the missing ==visitMethodNode:==.
A first implementation for this method simply continues the visit on the body of the method.

[[[
CHInterpreter >> visitMethodNode: aMethodNode [
	^ self visitNode: aMethodNode body
]
]]]

Execution then arrives to a missing ==visitSequenceNode:==.
Indeed, the body of a method is a sequence node containing a list of temporary variable definitions and a list of statements.
Since our scenario has only a single statement with no temporary variables, a first version of ==visitSequenceNode:== ignores temporary declarations and handles all the statements paying attention that the last statement value should be returned.
So we visit all the statements except the last one, and we then visit the last one and return its result.

[[[
CHInterpreter >> visitSequenceNode: aSequenceNode [
	"Visit all but the last statement without caring about the result"

	aSequenceNode statements allButLast
		do: [ :each | self visitNode: each ].
	^ self visitNode: aSequenceNode statements last
]
]]]

Then the visitor visits the return node, for which we define the ==visitReturnNode:== method.
This method simply visits the contents of the return node (invoking recursively the visitor) and returns the obtained value.
At the point, the value is not yet covered by the visitor.

[[[
CHInterpreter >> visitReturnNode: aReturnNode [
	^ self visitNode: aReturnNode value
]
]]]

Finally, the contents of the return node, the integer ==5== is represented as a literal value node.
To handle this node, we define the method ==visitLiteralValueNode:==.
The implementation just returns the value of the node, which is the integer we were looking for.

[[[
CHInterpreter >> visitLiteralValueNode: aLiteralValueNode [
	^ aLiteralValueNode value
]
]]]

Our first test is now green and we are ready to continue our journey.

!!! Evaluating Literals: Floats

For completeness, let's implement support for literal floats.
Since we already have integer constants working, let's consider next a method returning a float literal.
We can see such scenario in the code below:

[[[
CHInterpretable >> returnFloat [
	^ 3.14
]
]]]

Executing such method should return ==3.14==.

!!!! Writing a Test

Testing this case is straight forward, we should test that evaluating our method should return 3.14.
We already defined that our interpreter understands the ==execute:==  message, so this test can follow the implementation of our previous test.

[[[
CHInterpreterTest >> testReturnFloat [
	| ast result |
	ast := (CHInterpretable >> #returnFloat) ast.
	result := self interpreter execute: ast.
	self assert: result equals: 3.14
]
]]]

Two discussions come from writing this test. First, this test is already green, because the case of floating point constants and integer constants exercise the same code, so nothing is to be done on this side.
Second, some would argue that this test is somehow repeating code from the previous scenario: we will take care of this during our refactoring step.


!!! Refactor: Improving the Test Infrastructure

Since we will write many tests with similar structure during this book, it comes handy to share some logic between them. The two tests we wrote so far show a good candidate of logic to share as repeated code we can extract.

The method ==executeSelector:== extracts some common logic that will make our tests easier to read and understand: it obtains the AST of a method from its selector, evaluates it, and returns the value of the  execution.

[[[
CHInterpreterTest >> executeSelector: aSymbol [
	| ast |
	ast := (CHInterpretable >> aSymbol) ast.
	^ self interpreter execute: ast
]
]]]

And we can now proceed to rewrite our first two tests as follows:

[[[
CHInterpreterTest >> testReturnInteger [
	self
		assert: (self executeSelector: #returnInteger)
		equals: 5
]
]]]

[[[
CHInterpreterTest >> testReturnFloat [
	self
		assert: (self executeSelector: #returnFloat)
		equals: 3.14
]
]]]

We are ready to efficiently write tests for the other constants.

!!! Evaluating booleans

Boolean literals are the objects ==false== and ==true==, typically used for conditionals and control flow statements.
In the previous sections we implemented support for numbers, now we introduce support for returning boolean values as follows:

[[[
CHInterpretable >> returnBoolean [
	^ false
]
]]]

Evaluating such a method should return ==false==.
We define a test for our boolean scenario.
Note that here we do not use ==deny:==, because we want to make the result explicit for the reader of the test.

[[[
CHInterpreterTest >> testReturnBoolean [
  "Do not use deny: to make explicit that we expect the value false"
	self
    assert: (self executeSelector: #returnBoolean)
    equals: false
]
]]]

If everything went ok, this test will be automatically green, without the need for implementing anything.
This is because booleans are represented in the AST with literal value nodes, which we have already implemented.


!!! Evaluating Literals: Arrays

Now that we support simple literals such as booleans and numbers, let's introduce literal arrays.
Literal arrays are arrays that are defined inline in methods with all their elements being other literals.
Literals refer to the fact that such objects are created during the parsing of the method code and now by sending
a message.
For this scenario, let's define two different test scenarios: an empty literal array and a literal array that has elements.

[[[
CHInterpretable >> returnEmptyLiteralArray [
	^ #()
]

CHInterpretable >> returnRecursiveLiteralArray [
	^ #(true 1 #('ahah'))
]
]]]

These two methods should return the respective arrays.

!!!! Writing a Red Test

Writing tests to cover these two scenarios is again straight forward:

[[[
CHInterpreterTest >> testReturnEmptyLiteralArray [
	self
		assert: (self executeSelector: #returnEmptyLiteralArray)
		equals: #()
]

CHInterpreterTest >> testReturnRecursiveLiteralArray [
	self
		assert: (self executeSelector: #returnRecursiveLiteralArray)
		equals: #(true 1 #('ahah'))
]
]]]

!!!! Making the test pass: visiting literal array nodes

We have to implement the method ==visitLiteralArrayNode:== to visit literal arrays.
Literal arrays contain an array of literal nodes, representing the elements inside the literal array.
To make our tests pass, we need to evaluate a literal array node to an array where each element is the value of its corresponding literal node. Moreover, literal arrays are recursive structures: an array can contain other arrays.
In other words, we should handle the visit of literal arrays recursively.
Here we return the values returned by the interpretation of the elements.

[[[
CHInterpreter >> visitLiteralArrayNode: aLiteralArrayNode [
	^ aLiteralArrayNode contents
			collect: [ :literalNode | self visitNode: literalNode ]
			as: Array
]
]]]

This makes our tests pass, and so far there is nothing else to refactor or clean.
Up until now we did not consider any form of variable and we should handle them.

!!! Evaluating Variables: ==self== and ==super==

Variables in Pharo are of different kinds: ==self== and ==super== represent the evaluated message receiver, instance variables represent variable stored in the evaluated message receiver, temporaries and arguments are variables visible only within a particular method evaluation, shared variables and global variables are variables that are in the global scope and independent of the receiver.

To start working with variables, we begin with a method returning ==self== as the one below.
There is now a big difference between this scenario and the previous ones. Previous scenarios did always evaluate to the same value regardless when or how they were executed.
In this case, however, evaluating this method will return a different object if the receiver of the message changes.

[[[
CHInterpretable >> returnSelf [
	^ self
]
]]]

!!!! Writing a Red Test

To properly test how ==self== behaves we need to specify a receiver object, and then assert that the returned object is that same object with an identity check.
For this purpose we use as receiver a new object instance of ==Object==, which  implement equality as identity, guaranteeing that the object will be not only equals, but also the same.

[[[
CHInterpreterTest >> testReturnSelf [
	| receiver |
	receiver := Object new.
	self
		assert: (self executeSelector: #returnSelf withReceiver: receiver)
		equals: receiver
]
]]]

!!!! Introducing Support to Specify a Receiver

In this section we implement a first version of an execution context to introduce receiver objects.
This first support will get us up and running to implement initial variable support, but it will run short to properly implement message sends. This set up will be extended to support to message sends and block temporaries.

This initial support requires that the evaluator gets access to the receiver object of a message that would lead to the evaluation of the method
actually evaluated.
For now we add an instance variable in our evaluator called ==receiver==.

[[[
Object subclass: #CHInterpreter
	instanceVariableNames: 'receiver'
	classVariableNames: ''
	package: 'Champollion-Core'
]]]

We define an accessor so that we can easily adapt when we will introduce a better way representation later.
This instance variable is hidden behind this accessor, allowing us to change later on the implementation without breaking users.

[[[
CHInterpreter >> receiver [
	^ receiver
]
]]]


Then we replace the existing implementation of ==execute:== in ==CHInterpreter== by ==execute:withReceiver:== which allows us to specify the receiver.

[[[
CHInterpreter >> execute: anAST withReceiver: anObject [
	receiver := anObject.
	^ self visitNode: anAST
]
]]]

And finally, since that change break all our tests, we will create a new helper method in our tests ==executeSelector:withReceiver:== and then redefine the method ==executeSelector:== to use this new method with a default receiver.

[[[
CHInterpreterTest >> executeSelector: aSymbol [
  ^ self executeSelector: aSymbol withReceiver: nil
]

CHInterpreterTest >> executeSelector: aSymbol withReceiver: aReceiver [
	| ast |
	ast := (CHInterpretable >> aSymbol) ast.
	^ self interpreter execute: ast withReceiver: aReceiver
]
]]]

Now we have refactored our code, introduced the possibility to specify a message receiver, and still keep all our previous tests passing. Our new test is still red, but we are now ready to make it pass.

!!!! Making the test pass: visiting self nodes

The interpretation of ==self== is done in the method ==visitSelfNode:==.
It is simple, it just returns the value of the receiver stored in the interpreter.
Note that this method does not access the ==receiver== variable directly, but uses instead the accessor, leaving us the possibility of redefining that method without breaking the visit.

[[[
CHInterpretable >> visitSelfNode: aNode [
	^ self receiver
]
]]]

!!! Introducing ==super==

Following the same logic as for ==self==, we improve our evaluator to support ==super==.
We start by defining a method using ==super== and its companion test.

[[[
CHInterpretable >> returnSuper [
	^ super
]
]]]

[[[
CHInterpreterTest >> testReturnSuper [
  | receiver |
  receiver := Object new.
	self
		assert: (self executeSelector: #returnSuper withReceiver: receiver)
		equals: receiver
]
]]]

What the interpretation of ==super== shows is that this variable is also the receiver of the message.
Contrary to a common and wrong belief, ==super== is not the superclass or an instance of the superclass. It simply is the receiver:

[[[
CHInterpreter >> visitSuperNode: aNode [
	^ self receiver
]
]]]


!!! Evaluating Variables: Instance Variable Reads

The next step is to support instance variable reads.
Since they are evaluated in the context of the receiver object, we need a receiver object that has instance variables.
We already have such a class: ==CHInterpretable==.
We now add an instance variable as well as a getter and setter to be able to control the values in that instance variable.

[[[
Object subclass: #CHInterpretable
  instanceVariableNames: 'x'
  classVariableNames: ''
  package: 'Champollion-Tests'

CHInterpretable >> returnX [
	^ x
]

CHInterpretable >> x: anInteger [
	x := anInteger
]
]]]

To test the good evaluation of the instance variable read, we check that the getter returns the value in the instance variable, which we can previously set.

[[[
CHInterpreterTest >> testReturnInstanceVariableRead [
	| receiver |
	receiver := CHInterpretable new.
	receiver x: 100.
	self
		assert: (self executeSelector: #returnX withReceiver: receiver)
		equals: 100
]
]]]

Our test is failing so we are ready to make it work: we define ==visitInstanceVariableNode:== to reflectively access the state of receiver.

[[[
CHInterpreter >> visitInstanceVariableNode: aVariableNode [
	^ self receiver instVarNamed: aVariableNode name
]
]]]

All our tests should now pass!

!!!! About ASTs.
Note that in this implementation we are presuming that ASTs have pre-computed semantics information about the program.
In other words, our implementation takes advantage that the ASTs we manipulate know that ==x== is an instance variable.
Usually when parsing a program, the AST does not necessarily holds semantics information. Another pass is often required
to compute variable scope and enrich the AST.


!!! Refactor: Improving our Tests ==setUp==

Let's simplify how receivers are managed in tests.
Instead of having to explicitly create and manage a receiver object, we add the receiver as an instance variable to the ==CHInterpreterTest==.

[[[
TestCase subclass: #CHInterpreterTest
	instanceVariableNames: 'interpreter receiver'
	classVariableNames: ''
	package: 'Champollion-Tests'
]]]

We can then redefine the ==setUp== method to create a new instance of ==CHInterpretable== and  assign it to the variable ==receiver==.

[[[
CHInterpreterTest >> setUp [
	super setUp.
	receiver := CHInterpretable new
]
]]]

And now we use this new instance variable in ==executeSelector:== as the default receiver instead of ==nil==.

[[[
CHInterpreterTest >> executeSelector: aSymbol [
  ^ self executeSelector: selector withReceiver: receiver
]
]]]

And finally we rewrite all our test methods using an explicit receiver:

[[[
CHInterpreterTest >> testReturnSelf [
	self
		assert: (self executeSelector: #returnSelf)
		equals: receiver
]

CHInterpreterTest >> testReturnSuper [
	self
		assert: (self executeSelector: #returnSuper)
		equals: receiver
]

CHInterpreterTest >> testReturnInstanceVariableRead [
	receiver x: 100.
	self
		assert: (self executeSelector: #returnX)
		equals: 100
]
]]]

!!! Evaluating Variables: Instance Variable Writes

Now that we have support for instance variable reads, we keep on going with instance variable writes.
In our scenario, a method writes a literal integer into an instance variable ==x== and then returns the value of the assignment. This scenario has two observable behaviors that we will be tested separately.
First, such an assignment should be observable from the outside by reading that variable.
Second, an assignment is an expression whose value is the assigned value, thus the return value should also be the assigned value.

[[[
CHInterpretable >> store100IntoX [
	^ x := 100
]
]]]

To test this behavior, we evaluate the method above and then we validate that effectively the instance variable was mutated.
To make sure the value was modified, we set an initial value to the variable before the evaluation.
After the evaluation we should not keep that value.
The case of the return is similar to our previous tests.

[[[
CHInterpreterTest >> testStore100IntoX [
	receiver x: 17.
	self executeSelector: #store100IntoX.
	self assert: receiver x equals: 100
]

CHInterpreterTest >> testAssignmentReturnsAssignedValue [
	self
		assert: (self executeSelector: #store100IntoX)
		equals: 100
]
]]]

And finally, we implement a getter for the ==x== variable.
This getter is used to extract the value in the tests.

[[[
CHInterpretable >> x [
	^ x
]
]]]

!!!! Making the test pass: visiting assignment nodes

To make this test pass, we need to define the method ==visitAssignmentNode:==.
Evaluating an assignment node with the form ==variable := expression== requires that we evaluate the ==expression== and then set that value to the left-side variable.
Notice that the variable we are assigning into does not need to be evaluated/visited: the evaluation of a variable is equivalent to reading its value.
And in the left part of an assignment, we do not care about the value of the variable, but about the location of the variable.

% Agreed there was a little note above but it is not really clear @@note Guille: I don't like to use store:with: (nor nodes that are already semantically analysed), because it hides name resolution... We should explain name resolution at some point, I believe this is an important topic, that also is needed for compilation. Also name resolution to me it's not a parser responsibility, so we should have at least a section to talk about this. Because what we have now is an optimization. Anyways, for later :)

Our visit method then looks as follows: we recursively visit the right-side of the assignment (got through the ==value== accessor), we set that value to the variable, and we finally return the stored value.

[[[
CHInterpreter >> visitAssignmentNode: anAssignmentNode [
	" x := 100"

	| value |
	value := (self visitNode: anAssignmentNode value).
	anAssignmentNode variable store: value with: self.
	^ value
]
]]]

To set the value to the variable, we delegate the storing to the variable node itself. Again, since our AST nodes contain semantic information and know when a variable is an instance variable, the variable in this case is an ==RBInstanceVariableNode==.
Mirroring the instance variable read, an instance variable write reflectively writes the value to the object using ==instVarNamed:put:==.

[[[
RBInstanceVariableNode >> store: anObject with: anInterpreter [
	anInterpreter receiver instVarNamed: name put: anObject
]
]]]

Now the tests should pass.


!!! Evaluating Variables: Global Reads

We finish this chapter with the reading of global variables, which cover two cases: proper global variables, and the access to classes.
To better control our testing environment, we decided to not use the Pharo environment by default.
Instead, the interpreter will know its global environment in an instance variable and lookup globals in it using a simple API, making it possible to use the system's global environment instead if we wanted to.
We also leave outside of the scope of this chapter the writing to global variables.
The case of global variable writing is similar to the instance variable assignment, and it would require only to redefine ==store:with:== in the corresponding node for global variables.

Our first testing scenario, similar to the previous ones, is as follows: we define a method ==returnGlobal== reads and returns the global named ==Global==.

[[[
CHInterpretable >> returnGlobal [
	^ Global
]
]]]

We define a test which specifies that the interpreter' environment has a binding whose key is ==#Global== and value is a new object.

[[[
CHInterpreterTest >> testReturnGlobal [
	| globalObject |
	globalObject := Object new.
	interpreter globalEnvironmentAt: #Global put: globalObject.
	self assert: (self executeSelector: #returnGlobal) equals: globalObject
]
]]]

We introduce a new instance variable named ==globalEnvironment== in the class ==CHInterpreter== and we initialize it to an empty dictionary.
[[[
Object subclass: #CHInterpreter
	instanceVariableNames: 'receiver globalEnvironment'
	classVariableNames: ''
	category: 'Champollion-Core'
]]]

[[[
CHInterpreter >> initialize [
	super initialize.
	globalEnvironment := Dictionary new
]
]]]

We define the method ==globalEnvironmentAt:put:== to add a new binding to the environment.
[[[
CHInterpreter >> globalEnvironmentAt: aSymbol put: anObject [
	globalEnvironment at: aSymbol put: anObject
]
]]]

We have to change the accessor as well as the setup we used in the test class.
[[[
CHInterpreterTest >> interpreter [
	^ interpreter
]
]]]

[[[
CHInterpreterTest >> setUp [
	super setUp.
	receiver := CHInterpretable new.
	interpreter := CHInterpreter new.
]
]]]

Finally we simply define a new method ==visitGlobalNode:== that returns the value of a global node
by returning the value associated with the key in the global environment.
We decided that trying to access a global that is not defined will raise an error in the interpreter and halt the interpretation.
An alternative design would return a default value instead such as ==nil==.
A more complex design would have been to throw an exception in the interpreted program.
For the moment, halting the interpreter with an error suffices for our job.

[[[
CHInterpreter >> visitGlobalNode: aRBGlobalNode [
	^ self globalEnvironment
		at: aRBGlobalNode name
		ifAbsent: [ self error: aRBGlobalNode name, ' not found' ]
]
]]]


!!! Conclusion

In this chapter we have used the visitor pattern over AST nodes to implement a first version of a structural evaluator.
This evaluator covers literal integers, floats, booleans and arrays, instance variables and global variables.
Although we have not talked about it explicitly, we also implemented a first version of the visit of statements and return nodes.

This first evaluator serves as basis for implementing the execution of the main operations in Pharo: messages.
The following chapters will start by decomposing message resolution into method-lookup and apply operations, introduce the execution stack, the management of temporary variables and argument, and 'super' message-sends.

We leave for the reader the exercise of extending this prototype with support for dynamic arrays (e.g., =={ self expression. 1+1 }==), class variables reads and writes, and global variable writes. We further invite the reader to explore changing the language semantics by modifying this simple evaluator: How could we implement read-only objects? Log all variable reads and writes? Wrap all literals to do taint analysis?
